{"remainingRequest":"/Users/nazaro/Desktop/Plant_Analysis_tool/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nazaro/Desktop/Plant_Analysis_tool/frontend/src/components/AnalysisResults.vue?vue&type=template&id=dd98230c&scoped=true","dependencies":[{"path":"/Users/nazaro/Desktop/Plant_Analysis_tool/frontend/src/components/AnalysisResults.vue","mtime":1754593170862},{"path":"/Users/nazaro/Desktop/Plant_Analysis_tool/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1754379194500},{"path":"/Users/nazaro/Desktop/Plant_Analysis_tool/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1754379194500},{"path":"/Users/nazaro/Desktop/Plant_Analysis_tool/frontend/node_modules/babel-loader/lib/index.js","mtime":1754379194406},{"path":"/Users/nazaro/Desktop/Plant_Analysis_tool/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1754379197445},{"path":"/Users/nazaro/Desktop/Plant_Analysis_tool/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1754379194500},{"path":"/Users/nazaro/Desktop/Plant_Analysis_tool/frontend/node_modules/vue-loader/lib/index.js","mtime":1754379197445}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}