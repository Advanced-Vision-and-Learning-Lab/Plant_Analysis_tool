{"remainingRequest":"/Users/nazaro/Desktop/Plant_Analysis_tool/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nazaro/Desktop/Plant_Analysis_tool/frontend/src/components/PlantTimeline.vue?vue&type=style&index=0&id=bbac9468&scoped=true&lang=css","dependencies":[{"path":"/Users/nazaro/Desktop/Plant_Analysis_tool/frontend/src/components/PlantTimeline.vue","mtime":1754523430659},{"path":"/Users/nazaro/Desktop/Plant_Analysis_tool/frontend/node_modules/css-loader/dist/cjs.js","mtime":1754379195115},{"path":"/Users/nazaro/Desktop/Plant_Analysis_tool/frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1754379197445},{"path":"/Users/nazaro/Desktop/Plant_Analysis_tool/frontend/node_modules/postcss-loader/src/index.js","mtime":1754379196434},{"path":"/Users/nazaro/Desktop/Plant_Analysis_tool/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1754379194500},{"path":"/Users/nazaro/Desktop/Plant_Analysis_tool/frontend/node_modules/vue-loader/lib/index.js","mtime":1754379197445}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5wbGFudC10aW1lbGluZSB7CiAgaGVpZ2h0OiAxMDAlOwogIGRpc3BsYXk6IGZsZXg7CiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKICBwYWRkaW5nOiAyMHB4OwogIGJhY2tncm91bmQ6ICNmNWY1ZjU7Cn0KCi50aW1lbGluZS1jb250ZW50IHsKICBkaXNwbGF5OiBmbGV4OwogIGZsZXg6IDE7CiAgZ2FwOiAyMHB4OwogIG1hcmdpbi1ib3R0b206IDIwcHg7Cn0KCi5jaGFydC1jb250YWluZXIgewogIGZsZXg6IDE7CiAgYmFja2dyb3VuZDogd2hpdGU7CiAgYm9yZGVyLXJhZGl1czogOHB4OwogIHBhZGRpbmc6IDIwcHg7CiAgYm94LXNoYWRvdzogMCAycHggNHB4IHJnYmEoMCwgMCwgMCwgMC4xKTsKICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgaGVpZ2h0OiA0MDBweDsKfQoKLmNvbmZpZy1wYW5lbCB7CiAgd2lkdGg6IDMwMHB4OwogIGJhY2tncm91bmQ6IHdoaXRlOwogIGJvcmRlci1yYWRpdXM6IDhweDsKICBwYWRkaW5nOiAyMHB4OwogIGJveC1zaGFkb3c6IDAgMnB4IDRweCByZ2JhKDAsIDAsIDAsIDAuMSk7CiAgaGVpZ2h0OiBmaXQtY29udGVudDsKfQoKLmNvbmZpZy1wYW5lbCBoMyB7CiAgbWFyZ2luLXRvcDogMDsKICBtYXJnaW4tYm90dG9tOiAyMHB4OwogIGNvbG9yOiAjMzMzOwogIGZvbnQtc2l6ZTogMThweDsKICBmb250LXdlaWdodDogNjAwOwp9CgouY29uZmlnLWdyb3VwIHsKICBtYXJnaW4tYm90dG9tOiAxNnB4Owp9CgouY29uZmlnLWdyb3VwIGxhYmVsIHsKICBkaXNwbGF5OiBibG9jazsKICBtYXJnaW4tYm90dG9tOiA2cHg7CiAgY29sb3I6ICM1NTU7CiAgZm9udC13ZWlnaHQ6IDUwMDsKICBmb250LXNpemU6IDE0cHg7Cn0KCi5jb25maWctZ3JvdXAgc2VsZWN0LAouY29uZmlnLWdyb3VwIGlucHV0W3R5cGU9Im51bWJlciJdLAouY29uZmlnLWdyb3VwIGlucHV0W3R5cGU9ImRhdGUiXSB7CiAgd2lkdGg6IDEwMCU7CiAgcGFkZGluZzogOHB4IDEycHg7CiAgYm9yZGVyOiAxcHggc29saWQgI2RkZDsKICBib3JkZXItcmFkaXVzOiA0cHg7CiAgZm9udC1zaXplOiAxNHB4OwogIGJhY2tncm91bmQ6IHdoaXRlOwp9CgouY29uZmlnLWdyb3VwIHNlbGVjdDpmb2N1cywKLmNvbmZpZy1ncm91cCBpbnB1dDpmb2N1cyB7CiAgb3V0bGluZTogbm9uZTsKICBib3JkZXItY29sb3I6ICM0YWRlODA7CiAgYm94LXNoYWRvdzogMCAwIDAgMnB4IHJnYmEoNzQsIDIyMiwgMTI4LCAwLjIpOwp9CgouY2hlY2tib3gtZ3JvdXAgewogIGRpc3BsYXk6IGZsZXg7CiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKICBnYXA6IDhweDsKfQoKLmNoZWNrYm94LWdyb3VwIGxhYmVsIHsKICBkaXNwbGF5OiBmbGV4OwogIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgZ2FwOiA4cHg7CiAgZm9udC13ZWlnaHQ6IG5vcm1hbDsKICBjdXJzb3I6IHBvaW50ZXI7Cn0KCi5jaGVja2JveC1ncm91cCBpbnB1dFt0eXBlPSJjaGVja2JveCJdIHsKICB3aWR0aDogMTZweDsKICBoZWlnaHQ6IDE2cHg7CiAgYWNjZW50LWNvbG9yOiAjNGFkZTgwOwp9CgouZGF0ZS1yYW5nZSB7CiAgZGlzcGxheTogZmxleDsKICBhbGlnbi1pdGVtczogY2VudGVyOwogIGdhcDogOHB4Owp9CgouZGF0ZS1yYW5nZSBpbnB1dCB7CiAgZmxleDogMTsKfQoKLmRhdGUtcmFuZ2Ugc3BhbiB7CiAgY29sb3I6ICM2NjY7CiAgZm9udC1zaXplOiAxMnB4Owp9CgoudXBkYXRlLWJ0biB7CiAgd2lkdGg6IDEwMCU7CiAgcGFkZGluZzogMTJweDsKICBiYWNrZ3JvdW5kOiAjNGFkZTgwOwogIGNvbG9yOiB3aGl0ZTsKICBib3JkZXI6IG5vbmU7CiAgYm9yZGVyLXJhZGl1czogNHB4OwogIGZvbnQtc2l6ZTogMTRweDsKICBmb250LXdlaWdodDogNjAwOwogIGN1cnNvcjogcG9pbnRlcjsKICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kIDAuMnMgZWFzZTsKfQoKLnVwZGF0ZS1idG46aG92ZXI6bm90KDpkaXNhYmxlZCkgewogIGJhY2tncm91bmQ6ICMyMmM1NWU7Cn0KCi51cGRhdGUtYnRuOmRpc2FibGVkIHsKICBiYWNrZ3JvdW5kOiAjY2NjOwogIGN1cnNvcjogbm90LWFsbG93ZWQ7Cn0KCi5pbWFnZXMtc2VjdGlvbiB7CiAgYmFja2dyb3VuZDogd2hpdGU7CiAgYm9yZGVyLXJhZGl1czogOHB4OwogIHBhZGRpbmc6IDIwcHg7CiAgYm94LXNoYWRvdzogMCAycHggNHB4IHJnYmEoMCwgMCwgMCwgMC4xKTsKfQoKLmltYWdlcy1zZWN0aW9uIGgzIHsKICBtYXJnaW4tdG9wOiAwOwogIG1hcmdpbi1ib3R0b206IDE2cHg7CiAgY29sb3I6ICMzMzM7CiAgZm9udC1zaXplOiAxOHB4OwogIGZvbnQtd2VpZ2h0OiA2MDA7Cn0KCi5pbWFnZXMtZ3JpZCB7CiAgZGlzcGxheTogZ3JpZDsKICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdChhdXRvLWZpdCwgbWlubWF4KDIwMHB4LCAxZnIpKTsKICBnYXA6IDE2cHg7Cn0KCi5pbWFnZS1pdGVtIHsKICB0ZXh0LWFsaWduOiBjZW50ZXI7Cn0KCi5pbWFnZS1pdGVtIGg0IHsKICBtYXJnaW46IDAgMCA4cHggMDsKICBjb2xvcjogIzU1NTsKICBmb250LXNpemU6IDE0cHg7CiAgZm9udC13ZWlnaHQ6IDUwMDsKfQoKLmltYWdlLWl0ZW0gaW1nIHsKICB3aWR0aDogMTAwJTsKICBoZWlnaHQ6IDE1MHB4OwogIG9iamVjdC1maXQ6IGNvdmVyOwogIGJvcmRlci1yYWRpdXM6IDRweDsKICBib3JkZXI6IDFweCBzb2xpZCAjZGRkOwp9Cg=="},{"version":3,"sources":["PlantTimeline.vue"],"names":[],"mappings":";AAofile":"PlantTimeline.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"plant-timeline\">\n    <div class=\"timeline-content\">\n      <!-- Chart Container -->\n      <div class=\"chart-container\">\n        <canvas ref=\"timelineChart\" width=\"800\" height=\"400\"></canvas>\n      </div>\n      \n      <!-- Configuration Panel -->\n      <div class=\"config-panel\">\n        <h3>Display Configuration</h3>\n        \n        <!-- Feature Selection -->\n        <div class=\"config-group\">\n          <label>Feature Type:</label>\n          <select v-model=\"selectedFeatureType\" @change=\"onFeatureTypeChange\">\n            <option value=\"\">Select Feature Type</option>\n            <option value=\"vegetation\">Vegetation Index</option>\n            <option value=\"texture\">Texture Feature</option>\n          </select>\n        </div>\n        \n                 <div class=\"config-group\">\n           <label>Specific Feature:</label>\n           <select v-model=\"selectedFeature\" :disabled=\"!selectedFeatureType\">\n             <option value=\"\">Select Feature</option>\n             <option v-for=\"feature in availableFeatures\" :key=\"feature\" :value=\"feature\">\n               {{ feature }}\n             </option>\n           </select>\n         </div>\n         \n         <!-- Texture Band and Type Selection (for texture features) -->\n         <div v-if=\"selectedFeatureType === 'texture'\" class=\"config-group\">\n           <label>Texture Band:</label>\n           <select v-model=\"selectedTextureBand\" @change=\"updateTextureFeatures\">\n             <option value=\"\">Select Band</option>\n             <option value=\"color\">Color</option>\n             <option value=\"green\">Green</option>\n             <option value=\"nir\">NIR</option>\n             <option value=\"pca\">PCA</option>\n             <option value=\"red_edge\">Red Edge</option>\n             <option value=\"red\">Red</option>\n           </select>\n         </div>\n         \n         <div v-if=\"selectedFeatureType === 'texture' && selectedTextureBand\" class=\"config-group\">\n           <label>Texture Type:</label>\n           <select v-model=\"selectedTextureType\">\n             <option value=\"\">Select Type</option>\n             <option v-for=\"type in availableTextureTypes\" :key=\"type\" :value=\"type\">\n               {{ type }}\n             </option>\n           </select>\n         </div>\n        \n        <!-- Display Options -->\n        <div class=\"config-group\">\n          <label>Display Options:</label>\n          <div class=\"checkbox-group\">\n            <label>\n              <input type=\"checkbox\" v-model=\"showImages\" />\n              Show Images\n            </label>\n            <label>\n              <input type=\"checkbox\" v-model=\"showErrorBars\" />\n              Show Error Bars\n            </label>\n          </div>\n        </div>\n        \n        <div class=\"config-group\">\n          <label>Number of Images:</label>\n          <input \n            type=\"number\" \n            v-model=\"numImages\" \n            min=\"1\" \n            max=\"10\" \n            :disabled=\"!showImages\"\n          />\n        </div>\n        \n        <!-- Date Range -->\n        <div class=\"config-group\">\n          <label>Date Range:</label>\n          <div class=\"date-range\">\n            <input type=\"date\" v-model=\"startDate\" />\n            <span>to</span>\n            <input type=\"date\" v-model=\"endDate\" />\n          </div>\n        </div>\n        \n        <!-- Update Button -->\n        <button @click=\"updateChart\" :disabled=\"!canUpdate\" class=\"update-btn\">\n          Update Chart\n        </button>\n      </div>\n    </div>\n    \n    <!-- Images Display -->\n    <div v-if=\"showImages && selectedImages.length > 0\" class=\"images-section\">\n      <h3>Timeline Images</h3>\n      <div class=\"images-grid\">\n        <div v-for=\"image in selectedImages\" :key=\"image.date\" class=\"image-item\">\n          <h4>{{ image.date }}</h4>\n          <img :src=\"image.url\" :alt=\"`Image for ${image.date}`\" />\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Chart from 'chart.js/auto';\n\nexport default {\n  name: 'PlantTimeline',\n  props: {\n    timelineData: {\n      type: Object,\n      required: true\n    },\n    config: {\n      type: Object,\n      default: () => ({\n        featureType: '',\n        specificFeature: '',\n        displayImages: false,\n        numImages: 5\n      })\n    }\n  },\n  \n  data() {\n    return {\n      chart: null,\n      selectedFeatureType: this.config.featureType || '',\n      selectedFeature: this.config.specificFeature || '',\n      selectedTextureBand: '',\n      selectedTextureType: '',\n      showImages: this.config.displayImages || false,\n      showErrorBars: true,\n      numImages: this.config.numImages || 5,\n      startDate: '',\n      endDate: '',\n      availableFeatures: [],\n      availableTextureTypes: []\n    };\n  },\n  \n  computed: {\n    canUpdate() {\n      if (this.selectedFeatureType === 'vegetation') {\n        return this.selectedFeatureType && this.selectedFeature;\n      } else if (this.selectedFeatureType === 'texture') {\n        return this.selectedFeatureType && this.selectedTextureBand && this.selectedTextureType;\n      }\n      return false;\n    },\n    \n    selectedImages() {\n      if (!this.showImages || !this.timelineData) return [];\n      \n      const allDates = [...new Set([\n        ...this.timelineData.vegetation_timeline.map(v => v.date),\n        ...this.timelineData.texture_timeline.map(t => t.date)\n      ])].sort();\n      \n      if (allDates.length <= this.numImages) {\n        return allDates.map(date => ({\n          date,\n          url: this.getImageUrl(date)\n        }));\n      }\n      \n      // Select evenly spaced images\n      const step = Math.floor(allDates.length / this.numImages);\n      const selectedDates = [];\n      for (let i = 0; i < this.numImages; i++) {\n        const index = i * step;\n        if (index < allDates.length) {\n          selectedDates.push(allDates[index]);\n        }\n      }\n      \n      return selectedDates.map(date => ({\n        date,\n        url: this.getImageUrl(date)\n      }));\n    }\n  },\n  \n  watch: {\n    timelineData: {\n      handler() {\n        this.initializeDates();\n        this.updateAvailableFeatures();\n        if (this.chart) {\n          this.updateChart();\n        }\n      },\n      immediate: true\n    }\n  },\n  \n  mounted() {\n    this.initializeChart();\n    this.initializeDates();\n    this.updateAvailableFeatures();\n  },\n  \n  beforeUnmount() {\n    if (this.chart) {\n      this.chart.destroy();\n    }\n  },\n  \n  methods: {\n    initializeChart() {\n      const ctx = this.$refs.timelineChart.getContext('2d');\n      this.chart = new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: [],\n          datasets: []\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            title: {\n              display: true,\n              text: 'Plant Timeline Analysis'\n            },\n            legend: {\n              display: true\n            }\n          },\n          scales: {\n            x: {\n              title: {\n                display: true,\n                text: 'Date'\n              }\n            },\n            y: {\n              title: {\n                display: true,\n                text: 'Value'\n              }\n            }\n          }\n        }\n      });\n    },\n    \n    initializeDates() {\n      if (!this.timelineData) return;\n      \n      const allDates = [...new Set([\n        ...this.timelineData.vegetation_timeline.map(v => v.date),\n        ...this.timelineData.texture_timeline.map(t => t.date)\n      ])].sort();\n      \n      if (allDates.length > 0) {\n        this.startDate = allDates[0];\n        this.endDate = allDates[allDates.length - 1];\n      }\n    },\n    \n    updateAvailableFeatures() {\n      if (!this.timelineData) return;\n      \n      if (this.selectedFeatureType === 'vegetation') {\n        this.availableFeatures = [...new Set(\n          this.timelineData.vegetation_timeline.map(v => v.index_type)\n        )];\n      } else if (this.selectedFeatureType === 'texture') {\n        this.availableFeatures = [...new Set(\n          this.timelineData.texture_timeline.map(t => t.band_name)\n        )];\n      } else {\n        this.availableFeatures = [];\n      }\n    },\n    \n    updateTextureFeatures() {\n      if (!this.timelineData || !this.selectedTextureBand) {\n        this.availableTextureTypes = [];\n        return;\n      }\n      \n      this.availableTextureTypes = [...new Set(\n        this.timelineData.texture_timeline\n          .filter(t => t.band_name === this.selectedTextureBand)\n          .map(t => t.texture_type)\n      )];\n      \n      this.selectedTextureType = '';\n    },\n    \n    onFeatureTypeChange() {\n      this.selectedFeature = '';\n      this.selectedTextureBand = '';\n      this.selectedTextureType = '';\n      this.updateAvailableFeatures();\n    },\n    \n    updateChart() {\n      if (!this.chart || !this.timelineData) return;\n      \n      const data = this.getChartData();\n      \n      this.chart.data.labels = data.labels;\n      this.chart.data.datasets = data.datasets;\n      this.chart.update();\n    },\n    \n    getChartData() {\n      if (!this.timelineData) return { labels: [], datasets: [] };\n      \n      let timelineData = [];\n      \n      if (this.selectedFeatureType === 'vegetation') {\n        if (!this.selectedFeature) return { labels: [], datasets: [] };\n        timelineData = this.timelineData.vegetation_timeline\n          .filter(v => v.index_type === this.selectedFeature)\n          .filter(v => this.isDateInRange(v.date));\n      } else if (this.selectedFeatureType === 'texture') {\n        if (!this.selectedTextureBand || !this.selectedTextureType) return { labels: [], datasets: [] };\n        timelineData = this.timelineData.texture_timeline\n          .filter(t => t.band_name === this.selectedTextureBand && t.texture_type === this.selectedTextureType)\n          .filter(t => this.isDateInRange(t.date));\n      }\n      \n      const labels = timelineData.map(d => d.date);\n      \n      const datasets = [\n        {\n          label: 'Mean',\n          data: timelineData.map(d => d.mean),\n          borderColor: 'rgb(75, 192, 192)',\n          backgroundColor: 'rgba(75, 192, 192, 0.2)',\n          tension: 0.1\n        },\n        {\n          label: 'Median',\n          data: timelineData.map(d => d.median),\n          borderColor: 'rgb(255, 99, 132)',\n          backgroundColor: 'rgba(255, 99, 132, 0.2)',\n          tension: 0.1\n        }\n      ];\n      \n      if (this.showErrorBars) {\n        datasets.push({\n          label: 'Q25-Q75 Range',\n          data: timelineData.map(d => ({\n            y: d.mean,\n            yMin: d.q25,\n            yMax: d.q75\n          })),\n          borderColor: 'rgba(75, 192, 192, 0.5)',\n          backgroundColor: 'rgba(75, 192, 192, 0.1)',\n          type: 'bar'\n        });\n      }\n      \n      return { labels, datasets };\n    },\n    \n    isDateInRange(date) {\n      if (!this.startDate && !this.endDate) return true;\n      if (this.startDate && date < this.startDate) return false;\n      if (this.endDate && date > this.endDate) return false;\n      return true;\n    },\n    \n    getImageUrl(date) {\n      // This would need to be implemented based on your image storage structure\n      // For now, return a placeholder\n      return `https://via.placeholder.com/200x150?text=${date}`;\n    }\n  }\n};\n</script>\n\n<style scoped>\n.plant-timeline {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  padding: 20px;\n  background: #f5f5f5;\n}\n\n.timeline-content {\n  display: flex;\n  flex: 1;\n  gap: 20px;\n  margin-bottom: 20px;\n}\n\n.chart-container {\n  flex: 1;\n  background: white;\n  border-radius: 8px;\n  padding: 20px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  position: relative;\n  height: 400px;\n}\n\n.config-panel {\n  width: 300px;\n  background: white;\n  border-radius: 8px;\n  padding: 20px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  height: fit-content;\n}\n\n.config-panel h3 {\n  margin-top: 0;\n  margin-bottom: 20px;\n  color: #333;\n  font-size: 18px;\n  font-weight: 600;\n}\n\n.config-group {\n  margin-bottom: 16px;\n}\n\n.config-group label {\n  display: block;\n  margin-bottom: 6px;\n  color: #555;\n  font-weight: 500;\n  font-size: 14px;\n}\n\n.config-group select,\n.config-group input[type=\"number\"],\n.config-group input[type=\"date\"] {\n  width: 100%;\n  padding: 8px 12px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-size: 14px;\n  background: white;\n}\n\n.config-group select:focus,\n.config-group input:focus {\n  outline: none;\n  border-color: #4ade80;\n  box-shadow: 0 0 0 2px rgba(74, 222, 128, 0.2);\n}\n\n.checkbox-group {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n.checkbox-group label {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-weight: normal;\n  cursor: pointer;\n}\n\n.checkbox-group input[type=\"checkbox\"] {\n  width: 16px;\n  height: 16px;\n  accent-color: #4ade80;\n}\n\n.date-range {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.date-range input {\n  flex: 1;\n}\n\n.date-range span {\n  color: #666;\n  font-size: 12px;\n}\n\n.update-btn {\n  width: 100%;\n  padding: 12px;\n  background: #4ade80;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  font-size: 14px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: background 0.2s ease;\n}\n\n.update-btn:hover:not(:disabled) {\n  background: #22c55e;\n}\n\n.update-btn:disabled {\n  background: #ccc;\n  cursor: not-allowed;\n}\n\n.images-section {\n  background: white;\n  border-radius: 8px;\n  padding: 20px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.images-section h3 {\n  margin-top: 0;\n  margin-bottom: 16px;\n  color: #333;\n  font-size: 18px;\n  font-weight: 600;\n}\n\n.images-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 16px;\n}\n\n.image-item {\n  text-align: center;\n}\n\n.image-item h4 {\n  margin: 0 0 8px 0;\n  color: #555;\n  font-size: 14px;\n  font-weight: 500;\n}\n\n.image-item img {\n  width: 100%;\n  height: 150px;\n  object-fit: cover;\n  border-radius: 4px;\n  border: 1px solid #ddd;\n}\n</style>\n"]}]}