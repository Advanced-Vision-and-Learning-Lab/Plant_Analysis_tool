{"remainingRequest":"/home/grads/f/fahimehorvatinia/Documents/Plant_Analysis_Cleaned_Updated/frontend/node_modules/babel-loader/lib/index.js!/home/grads/f/fahimehorvatinia/Documents/Plant_Analysis_Cleaned_Updated/frontend/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/grads/f/fahimehorvatinia/Documents/Plant_Analysis_Cleaned_Updated/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/grads/f/fahimehorvatinia/Documents/Plant_Analysis_Cleaned_Updated/frontend/src/views/ResultViewer.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/grads/f/fahimehorvatinia/Documents/Plant_Analysis_Cleaned_Updated/frontend/src/views/ResultViewer.vue","mtime":1748382090908},{"path":"/home/grads/f/fahimehorvatinia/Documents/Plant_Analysis_Cleaned_Updated/frontend/package.json","mtime":1748485435743},{"path":"/home/grads/f/fahimehorvatinia/Documents/Plant_Analysis_Cleaned_Updated/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1748485495354},{"path":"/home/grads/f/fahimehorvatinia/Documents/Plant_Analysis_Cleaned_Updated/frontend/node_modules/babel-loader/lib/index.js","mtime":1748485495741},{"path":"/home/grads/f/fahimehorvatinia/Documents/Plant_Analysis_Cleaned_Updated/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1748485495354},{"path":"/home/grads/f/fahimehorvatinia/Documents/Plant_Analysis_Cleaned_Updated/frontend/node_modules/vue-loader/lib/index.js","mtime":1748485495807}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["PlantSidebar","VueEasyLightbox","getPlantResults","analyzePlant","name","components","data","availableDates","sidebarSelection","plantId","date","plants","Array","from","length","_","i","id","minDate","maxDate","result","loading","currentTab","tabs","showViewer","viewerImg","vegIndexList","textureBands","textureSuffixes","error","vegIndexSearch","textureSearch","morphSearch","aboutDialog","snackbar","snackbarText","snackbarColor","galleryImgs","galleryIndex","hasAnalyzed","imageSize","watch","handler","immediate","computed","nestedResult","key","endsWith","formattedVegIndices","nested","vegetation_features","isArray","v","out","Object","keys","forEach","k","idx","replace","mean","std","min","max","q25","median","q75","morphology","_this$result","morphology_features","textureStats","texture_features","folderName","_this$result2","plant_id","imageList","filter","map","label","capitalize","url","textureImageList","bands","suffixes","images","band","suffix","push","vegIndexHeaders","text","value","vegIndexItems","entries","index","textureHeaders","textureItems","feature","morphHeaders","morphItems","vegIndexHeadersWithTooltips","h","cellClass","align","sortable","textureHeadersWithTooltips","morphHeadersWithTooltips","morphologyTable","textureTable","vegIndicesTable","methods","getImageUrl","getTextureUrl","getVegIndexUrl","s","charAt","toUpperCase","slice","fetchResults","e","_e$response","response","status","analysisError","console","alert","triggerAnalysis","pollForResult","showSnackbar","allResultsReady","mainImages","allMainImages","every","allVegIndices","morph","hasMorph","hasTexture","hasVegFeatures","poll","setInterval","clearInterval","openImage","imgUrl","downloadCSV","type","headers","items","csv","join","row","JSON","stringify","toLowerCase","blob","Blob","window","URL","createObjectURL","a","document","createElement","href","download","click","revokeObjectURL","downloadImage","split","pop","body","appendChild","removeChild","color","openGallery","imgs","analyzeAll","onAnalyze"],"sources":["src/views/ResultViewer.vue"],"sourcesContent":["<template>\n  <div>\n    <!-- Main layout row: sidebar and main content -->\n    <v-row class=\"result-viewer-row\" no-gutters>\n      <!-- Sidebar: plant/date selection and dark mode toggle -->\n      <v-col cols=\"12\" md=\"3\" lg=\"2\" class=\"sidebar-col\">\n        <PlantSidebar\n          :plants=\"plants\"\n          :minDate=\"minDate\"\n          :maxDate=\"maxDate\"\n          v-model=\"sidebarSelection\"\n          @analyze=\"onAnalyze\"\n        />\n        <!-- Dark mode switch -->\n        <v-switch\n          v-model=\"$vuetify.theme.dark\"\n          label=\"Dark mode\"\n          class=\"mt-4\"\n          inset\n        />\n      </v-col>\n      <!-- Main content area: results, images, tables -->\n      <v-col cols=\"12\" md=\"9\" lg=\"10\" class=\"main-content-col\">\n        <!-- Loading bar -->\n        <v-progress-linear\n          v-if=\"loading\"\n          indeterminate\n          color=\"primary\"\n          absolute\n          top\n        ></v-progress-linear>\n        <!-- Snackbar for notifications -->\n        <v-snackbar v-model=\"snackbar\" :color=\"snackbarColor\" timeout=\"4000\">\n          {{ snackbarText }}\n        </v-snackbar>\n        <!-- Instruction if no plant/date selected -->\n        <div v-if=\"!sidebarSelection.plantId || !sidebarSelection.date\">\n          <div class=\"center-instruction\">\n            Please select the date and plant number and click Analyze to start.\n          </div>\n        </div>\n        <div v-else>\n          <!-- Hidden analyze button (could be used for manual trigger) -->\n          <v-btn color=\"primary\" @click=\"onAnalyze\" :disabled=\"loading\" style=\"margin: 24px 0; display: none;\">\n            Analyze\n          </v-btn>\n          <!-- Image size slider -->\n          <v-row class=\"mb-4\" align=\"center\">\n            <v-col cols=\"12\" md=\"6\" lg=\"4\">\n              <v-slider\n                v-model=\"imageSize\"\n                :min=\"100\"\n                :max=\"700\"\n                :step=\"10\"\n                label=\"Image Size\"\n                thumb-label\n                ticks\n              />\n            </v-col>\n          </v-row>\n          <div v-if=\"result\">\n            <!-- Tabs for different result types -->\n            <v-tabs v-model=\"currentTab\" background-color=\"white\" grow style=\"position:sticky;top:0;z-index:1;\">\n              <v-tab v-for=\"tab in tabs\" :key=\"tab\">{{ tab }}</v-tab>\n            </v-tabs>\n            <v-tabs-items v-model=\"currentTab\">\n              <!-- Images Tab -->\n              <v-tab-item>\n                <v-row>\n                  <v-col v-for=\"img in imageList\" :key=\"img.label\" cols=\"12\" md=\"6\" lg=\"3\">\n                    <div class=\"image-item\">\n                      <h4>{{ img.label }}\n                        <!-- Download image button with tooltip -->\n                        <v-tooltip bottom>\n                          <template v-slot:activator=\"{ on, attrs }\">\n                            <v-btn icon small v-bind=\"attrs\" v-on=\"on\" @click=\"downloadImage(img.url)\">\n                              <v-icon>mdi-download</v-icon>\n                            </v-btn>\n                          </template>\n                          <span>Download image</span>\n                        </v-tooltip>\n                      </h4>\n                      <!-- Clickable image opens gallery -->\n                      <img v-if=\"getImageUrl(img.key)\" :src=\"getImageUrl(img.key)\" @click=\"openGallery(imageList.map(i=>i.url), imageList.findIndex(i=>i.key===img.key))\" class=\"clickable-img desktop-img\" :style=\"{ maxWidth: imageSize + 'px', maxHeight: imageSize + 'px' }\" />\n                    </div>\n                  </v-col>\n                </v-row>\n                <!-- Lightbox for image viewing -->\n                <vue-easy-lightbox\n                  :visible=\"showViewer\"\n                  :imgs=\"galleryImgs\"\n                  :index=\"galleryIndex\"\n                  @hide=\"showViewer = false\"\n                />\n              </v-tab-item>\n              <!-- Texture Images Tab -->\n              <v-tab-item>\n                <v-row>\n                  <v-col v-for=\"img in textureImageList\" :key=\"img.label\" cols=\"12\" md=\"6\" lg=\"3\">\n                    <div class=\"image-item\">\n                      <h4>{{ img.label }}\n                        <v-tooltip bottom>\n                          <template v-slot:activator=\"{ on, attrs }\">\n                            <v-btn icon small v-bind=\"attrs\" v-on=\"on\" @click=\"downloadImage(img.url)\">\n                              <v-icon>mdi-download</v-icon>\n                            </v-btn>\n                          </template>\n                          <span>Download image</span>\n                        </v-tooltip>\n                      </h4>\n                      <img v-if=\"img.url\" :src=\"img.url\" @click=\"openGallery(textureImageList.map(i=>i.url), textureImageList.findIndex(i=>i.url===img.url))\" class=\"clickable-img desktop-img\" :style=\"{ maxWidth: imageSize + 'px', maxHeight: imageSize + 'px' }\" />\n                    </div>\n                  </v-col>\n                </v-row>\n                <vue-easy-lightbox\n                  :visible=\"showViewer\"\n                  :imgs=\"galleryImgs\"\n                  :index=\"galleryIndex\"\n                  @hide=\"showViewer = false\"\n                />\n              </v-tab-item>\n              <!-- Vegetation Indices Images Tab -->\n              <v-tab-item>\n                <v-row>\n                  <v-col v-for=\"(name, idx) in vegIndexList\" :key=\"name\" cols=\"12\" md=\"4\" lg=\"3\">\n                    <div class=\"image-item\">\n                      <h4>{{ name }}\n                        <v-tooltip bottom>\n                          <template v-slot:activator=\"{ on, attrs }\">\n                            <v-btn icon small v-bind=\"attrs\" v-on=\"on\" @click=\"downloadImage(getVegIndexUrl(name))\">\n                              <v-icon>mdi-download</v-icon>\n                            </v-btn>\n                          </template>\n                          <span>Download image</span>\n                        </v-tooltip>\n                      </h4>\n                      <img v-if=\"getVegIndexUrl(name)\" :src=\"getVegIndexUrl(name)\" @click=\"openGallery(vegIndexList.map(n=>getVegIndexUrl(n)), idx)\" class=\"clickable-img desktop-img\" :style=\"{ maxWidth: imageSize + 'px', maxHeight: imageSize + 'px' }\" />\n                    </div>\n                  </v-col>\n                </v-row>\n                <vue-easy-lightbox\n                  :visible=\"showViewer\"\n                  :imgs=\"galleryImgs\"\n                  :index=\"galleryIndex\"\n                  @hide=\"showViewer = false\"\n                />\n              </v-tab-item>\n              <!-- Vegetation Indices Table Tab -->\n              <v-tab-item>\n                <!-- Search and download for veg indices table -->\n                <v-text-field\n                  v-model=\"vegIndexSearch\"\n                  append-icon=\"mdi-magnify\"\n                  label=\"Search\"\n                  single-line\n                  hide-details\n                  class=\"mb-2\"\n                />\n                <v-btn color=\"primary\" small class=\"mb-2\" @click=\"downloadCSV('vegIndex')\">\n                  Download CSV\n                </v-btn>\n                <v-data-table\n                  :headers=\"vegIndexHeadersWithTooltips\"\n                  :items=\"vegIndexItems\"\n                  :search=\"vegIndexSearch\"\n                  class=\"elevation-1\"\n                  dense\n                  :items-per-page=\"10\"\n                  :footer-props=\"{ itemsPerPageOptions: [5, 10, 25, 50] }\"\n                  :sort-by=\"['index']\"\n                />\n              </v-tab-item>\n              <!-- Texture Features Table Tab -->\n              <v-tab-item>\n                <v-text-field\n                  v-model=\"textureSearch\"\n                  append-icon=\"mdi-magnify\"\n                  label=\"Search\"\n                  single-line\n                  hide-details\n                  class=\"mb-2\"\n                />\n                <v-btn color=\"primary\" small class=\"mb-2\" @click=\"downloadCSV('texture')\">\n                  Download CSV\n                </v-btn>\n                <v-data-table\n                  :headers=\"textureHeadersWithTooltips\"\n                  :items=\"textureItems\"\n                  :search=\"textureSearch\"\n                  class=\"elevation-1\"\n                  dense\n                  :items-per-page=\"10\"\n                  :footer-props=\"{ itemsPerPageOptions: [5, 10, 25, 50] }\"\n                  :sort-by=\"['feature']\"\n                />\n              </v-tab-item>\n              <!-- Morphological Features Table Tab -->\n              <v-tab-item>\n                <v-text-field\n                  v-model=\"morphSearch\"\n                  append-icon=\"mdi-magnify\"\n                  label=\"Search\"\n                  single-line\n                  hide-details\n                  class=\"mb-2\"\n                />\n                <v-btn color=\"primary\" small class=\"mb-2\" @click=\"downloadCSV('morph')\">\n                  Download CSV\n                </v-btn>\n                <v-data-table\n                  :headers=\"morphHeadersWithTooltips\"\n                  :items=\"morphItems\"\n                  :search=\"morphSearch\"\n                  class=\"elevation-1\"\n                  dense\n                  :items-per-page=\"10\"\n                  :footer-props=\"{ itemsPerPageOptions: [5, 10, 25, 50] }\"\n                  :sort-by=\"['feature']\"\n                />\n              </v-tab-item>\n            </v-tabs-items>\n          </div>\n        </div>\n        <!-- Floating action button for analyze all (future feature) -->\n        <v-btn fab color=\"primary\" fixed bottom right @click=\"analyzeAll\" class=\"fab-btn\">\n          <v-icon>mdi-rocket</v-icon>\n        </v-btn>\n      </v-col>\n    </v-row>\n    <!-- Footer with about and navigation -->\n    <footer class=\"result-footer\">\n      <div class=\"footer-content\">\n        <div class=\"footer-about\">\n          <strong>Plant Analysis Platform</strong><br>\n          Empowering researchers and agronomists with advanced AI-driven plant phenotyping.<br>\n          Analyze plant images for biotic and abiotic stress, visualize results, and extract actionable insights with ease.\n        </div>\n        <div class=\"footer-actions\">\n          <v-btn text color=\"primary\" @click=\"$router.push('/')\">Return to Main Menu</v-btn>\n        </div>\n      </div>\n    </footer>\n  </div>\n</template>\n\n<script>\n// Import child components and API helpers\nimport PlantSidebar from './PlantSidebar.vue';\nimport VueEasyLightbox from 'vue-easy-lightbox';\nimport { getPlantResults, analyzePlant } from '@/api.js';\n\nexport default {\n  name: 'ResultViewer',\n  components: { PlantSidebar, VueEasyLightbox },\n  data() {\n    // Main state for sidebar, plant list, results, UI, etc.\n    const availableDates = [\n      '2024-12-04',\n      '2024-12-10',\n      '2024-12-16',\n      '2025-01-13',\n      '2025-01-24',\n      '2025-01-31',\n      '2025-02-05',\n      '2025-02-14',\n      '2025-03-03',\n      '2025-03-12',\n      '2025-03-24',\n      '2025-04-01',\n      '2025-04-15',\n      '2025-04-16',\n      '2025-04-17',\n      '2025-04-21'\n    ];\n\n    return {\n      sidebarSelection: { plantId: null, date: null }, // Selected plant/date\n      plants: Array.from({ length: 48 }, (_, i) => ({\n        id: `plant${i + 1}`,\n        name: `Plant ${i + 1}`,\n        availableDates\n      })),\n      minDate: '2024-12-04',\n      maxDate: '2025-04-21',\n      result: null, // Analysis result data\n      loading: false, // Loading state\n      currentTab: 0, // Active tab index\n      tabs: [\n        'Images',\n        'Texture Images',\n        'Vegetation Indices Images',\n        'Vegetation Indices Table',\n        'Texture Features Table',\n        'Morphological Features Table'\n      ],\n      showViewer: false, // Lightbox visibility\n      viewerImg: '', // Current image in viewer\n      vegIndexList: [\n        // List of vegetation indices\n        'ARI','ARI2','AVI','CCCI','CIgreen','CIRE','CVI','DSWI4','DVI',\n        'EVI2','ExR','GEMI','GNDVI','GOSAVI','GRNDVI','GRVI','GSAVI',\n        'IPVI','LCI','MCARI','MCARI1','MCARI2','MGRVI','MSAVI','MSR',\n        'MTVI1','MTVI2','NDRE','NDVI','NDWI','NGRDI','NLI','OSAVI',\n        'PVI','RDVI','RI','RRI1','SIPI2','SR','TCARI','TCARIOSAVI',\n        'TNDVI','TSAVI','WDVI'\n      ],\n      textureBands: ['color','green','nir','red_edge','red','pca'],\n      textureSuffixes: [\n        '01_orig.png','02_gray.png','03_lbp.png','04_hog.png',\n        '05_lac1.png','06_lac2.png','07_lac3.png','08_ehd_map.png'\n      ],\n      error: null,\n      vegIndexSearch: '',\n      textureSearch: '',\n      morphSearch: '',\n      aboutDialog: false,\n      snackbar: false,\n      snackbarText: '',\n      snackbarColor: 'success',\n      galleryImgs: [],\n      galleryIndex: 0,\n      hasAnalyzed: false,\n      imageSize: 350, // Default image size in px\n    };\n  },\n  watch: {\n    // Reset result when sidebar selection changes\n    sidebarSelection: {\n      handler() {\n        this.hasAnalyzed = false;\n        this.result = null;\n      },\n      immediate: true\n    }\n  },\n  computed: {\n    // Extract nested result object if present\n    nestedResult() {\n      if (!this.result) return null;\n      for (const key in this.result) {\n        if (key.endsWith('_result') && typeof this.result[key] === 'object') {\n          return this.result[key];\n        }\n      }\n      return null;\n    },\n    // Format vegetation indices for table display\n    formattedVegIndices() {\n      const nested = this.nestedResult;\n      if (!nested || !nested.vegetation_features || !Array.isArray(nested.vegetation_features) || nested.vegetation_features.length === 0) {\n        return {};\n      }\n      const v = nested.vegetation_features[0] || {};\n      const out = {};\n      Object.keys(v).forEach(k => {\n        if (k.endsWith('_mean')) {\n          const idx = k.replace('_mean','');\n          out[idx] = {\n            mean: v[`${idx}_mean`],\n            std: v[`${idx}_std`],\n            min: v[`${idx}_min`],\n            max: v[`${idx}_max`],\n            q25: v[`${idx}_q25`],\n            median: v[`${idx}_median`],\n            q75: v[`${idx}_q75`]\n          };\n        }\n      });\n      return out;\n    },\n    // Morphological features for table\n    morphology() {\n      return this.result?.morphology_features || {};\n    },\n    // Texture statistics for table\n    textureStats() {\n      const nested = this.nestedResult;\n      if (!nested || !nested.texture_features || !Array.isArray(nested.texture_features) || nested.texture_features.length === 0) {\n        return {};\n      }\n      return nested.texture_features[0] || {};\n    },\n    // Plant folder name\n    folderName() {\n      return this.result?.plant_id;\n    },\n    // List of main images to display\n    imageList() {\n      if (!this.result) return [];\n      const keys = ['original', 'mask', 'overlay', 'segmented'];\n      return keys.filter(k => this.result[k]).map(k => ({ label: this.capitalize(k), key: k, url: this.result[k] }));\n    },\n    // List of texture images to display\n    textureImageList() {\n      if (!this.result) return [];\n      // Find all keys that match texture_{band}_{suffix} and group by band\n      const bands = ['color','green','nir','pca','red','red_edge'];\n      const suffixes = [\n        '01_orig','02_gray','03_lbp','04_hog','05_lac1','06_lac2','07_lac3','08_ehd_map'\n      ];\n      let images = [];\n      for (const band of bands) {\n        for (const suffix of suffixes) {\n          const key = `texture_${band}_${suffix}`;\n          if (this.result[key]) {\n            images.push({\n              label: `${this.capitalize(band)} ${suffix.replace(/\\d+_/, '').replace('_', ' ').replace('.png','')}`,\n              band,\n              suffix,\n              url: this.result[key]\n            });\n          }\n        }\n      }\n      return images;\n    },\n    // Table headers for vegetation indices\n    vegIndexHeaders() {\n      return [\n        { text: 'Index', value: 'index' },\n        { text: 'Mean', value: 'mean' },\n        { text: 'Std', value: 'std' },\n        { text: 'Min', value: 'min' },\n        { text: 'Max', value: 'max' },\n        { text: '25%', value: 'q25' },\n        { text: '50%', value: 'median' },\n        { text: '75%', value: 'q75' }\n      ];\n    },\n    // Table items for vegetation indices\n    vegIndexItems() {\n      return Object.entries(this.formattedVegIndices).map(([index, data]) => ({\n        index,\n        mean: data.mean,\n        std: data.std,\n        min: data.min,\n        max: data.max,\n        q25: data.q25,\n        median: data.median,\n        q75: data.q75\n      }));\n    },\n    // Table headers for texture features\n    textureHeaders() {\n      return [\n        { text: 'Feature', value: 'feature' },\n        { text: 'Value', value: 'value' }\n      ];\n    },\n    // Table items for texture features\n    textureItems() {\n      return Object.entries(this.textureStats).map(([feature, value]) => ({\n        feature,\n        value\n      }));\n    },\n    // Table headers for morphology features\n    morphHeaders() {\n      return [\n        { text: 'Feature', value: 'feature' },\n        { text: 'Value', value: 'value' }\n      ];\n    },\n    // Table items for morphology features\n    morphItems() {\n      return Object.entries(this.morphology).map(([feature, value]) => ({\n        feature,\n        value\n      }));\n    },\n    // Add tooltips to veg index headers\n    vegIndexHeadersWithTooltips() {\n      return this.vegIndexHeaders.map(h => ({\n        ...h,\n        cellClass: 'header-cell',\n        align: 'center',\n        sortable: true,\n        text: h.text + (h.value === 'mean' ? ' ℹ️' : '')\n      }));\n    },\n    // Add tooltips to texture headers\n    textureHeadersWithTooltips() {\n      return this.textureHeaders.map(h => ({\n        ...h,\n        cellClass: 'header-cell',\n        align: 'center',\n        sortable: true,\n        text: h.text + (h.value === 'value' ? ' ℹ️' : '')\n      }));\n    },\n    // Add tooltips to morph headers\n    morphHeadersWithTooltips() {\n      return this.morphHeaders.map(h => ({\n        ...h,\n        cellClass: 'header-cell',\n        align: 'center',\n        sortable: true,\n        text: h.text + (h.value === 'value' ? ' ℹ️' : '')\n      }));\n    },\n    // Morphology table for advanced use\n    morphologyTable() {\n      if (!this.result) return [];\n      if (Array.isArray(this.result.morphology_features)) return this.result.morphology_features;\n      if (typeof this.result.morphology_features === 'object') return [this.result.morphology_features];\n      return [];\n    },\n    // Texture table for advanced use\n    textureTable() {\n      const nested = this.nestedResult;\n      if (!nested) return [];\n      if (Array.isArray(nested.texture_features)) return nested.texture_features;\n      if (typeof nested.texture_features === 'object') return [nested.texture_features];\n      return [];\n    },\n    // Veg indices table for advanced use\n    vegIndicesTable() {\n      const nested = this.nestedResult;\n      if (!nested) return [];\n      if (Array.isArray(nested.vegetation_features)) return nested.vegetation_features;\n      if (typeof nested.vegetation_features === 'object') return [nested.vegetation_features];\n      return [];\n    },\n  },\n  methods: {\n    // Get image URL by key\n    getImageUrl(key) {\n      return this.result && this.result[key] ? this.result[key] : '';\n    },\n    // Get texture image URL by band and suffix\n    getTextureUrl(band, suffix) {\n      const key = `texture_${band}_${suffix}`;\n      return this.result && this.result[key] ? this.result[key] : '';\n    },\n    // Get vegetation index image URL by name\n    getVegIndexUrl(name) {\n      const key = `vegetation_indices_${name}`;\n      return this.result && this.result[key] ? this.result[key] : '';\n    },\n    // Capitalize a string\n    capitalize(s) {\n      return s.charAt(0).toUpperCase() + s.slice(1);\n    },\n    // Fetch results for selected plant/date\n    async fetchResults(plantId, date) {\n      this.loading = true;\n      try {\n        this.result = await getPlantResults(plantId, date);\n      } catch (e) {\n        if (e.response?.status === 404) {\n          try {\n            await analyzePlant(plantId, date);\n            this.result = await getPlantResults(plantId, date);\n          } catch (analysisError) {\n            console.error('Analysis failed:', analysisError);\n            alert('Failed to analyze plant. Please try again later.');\n          }\n        } else {\n          console.error('Failed to load results:', e);\n          alert('Error loading results. Please try again later.');\n        }\n      } finally {\n        this.loading = false;\n      }\n    },\n    // Trigger analysis and poll for results\n    async triggerAnalysis(plantId, date) {\n      this.loading = true;\n      try {\n        await analyzePlant(plantId, date);\n        await this.pollForResult(plantId, date);\n      } catch (e) {\n        this.showSnackbar('Failed to analyze plant. Please try again later.', 'error');\n      } finally {\n        this.loading = false;\n      }\n    },\n    // Check if all results are ready\n    allResultsReady(result) {\n      // Check for main images\n      const mainImages = ['original', 'mask', 'overlay', 'segmented'];\n      const allMainImages = mainImages.every(k => result && result[k]);\n      // Check for vegetation index images\n      const allVegIndices = this.vegIndexList.every(name => result && result[`vegetation_indices_${name}`]);\n      // Check for feature tables\n      // Morphology\n      const morph = result && result.morphology_features;\n      const hasMorph = morph && Object.keys(morph).length > 0;\n      // Texture\n      let nested = null;\n      for (const key in result) {\n        if (key.endsWith('_result') && typeof result[key] === 'object') {\n          nested = result[key];\n          break;\n        }\n      }\n      const hasTexture = nested && nested.texture_features && Array.isArray(nested.texture_features) && nested.texture_features.length > 0;\n      const hasVegFeatures = nested && nested.vegetation_features && Array.isArray(nested.vegetation_features) && nested.vegetation_features.length > 0;\n      return allMainImages && allVegIndices && hasMorph && hasTexture && hasVegFeatures;\n    },\n    // Poll for results every 3 seconds until all are ready\n    async pollForResult(plantId, date) {\n      // Poll every 3 seconds, always update UI with whatever is available\n      const poll = setInterval(async () => {\n        try {\n          const result = await getPlantResults(plantId, date);\n          if (result) {\n            this.result = result; // Always update with whatever is available\n            if (this.allResultsReady(result)) {\n              clearInterval(poll);\n            }\n          }\n        } catch (e) {\n          // Still processing, keep polling\n        }\n      }, 3000);\n    },\n    // Open image in lightbox\n    openImage(imgUrl) {\n      this.viewerImg = imgUrl\n      this.showViewer = true\n    },\n    // Download table as CSV\n    downloadCSV(type) {\n      let headers = [];\n      let items = [];\n      if (type === 'vegIndex') {\n        headers = this.vegIndexHeaders.map(h => h.text);\n        items = this.vegIndexItems;\n      } else if (type === 'texture') {\n        headers = this.textureHeaders.map(h => h.text);\n        items = this.textureItems;\n      } else if (type === 'morph') {\n        headers = this.morphHeaders.map(h => h.text);\n        items = this.morphItems;\n      }\n      const csv = [\n        headers.join(','),\n        ...items.map(row => headers.map(h => JSON.stringify(row[h.toLowerCase()])).join(','))\n      ].join('\\n');\n      const blob = new Blob([csv], { type: 'text/csv' });\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `${type}_table.csv`;\n      a.click();\n      window.URL.revokeObjectURL(url);\n    },\n    // Download image by URL\n    downloadImage(url) {\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = url.split('/').pop();\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n    },\n    // Show snackbar notification\n    showSnackbar(text, color = 'success') {\n      this.snackbarText = text;\n      this.snackbarColor = color;\n      this.snackbar = true;\n    },\n    // Open gallery lightbox with images\n    openGallery(imgs, idx) {\n      this.galleryImgs = imgs;\n      this.galleryIndex = idx;\n      this.showViewer = true;\n    },\n    // Placeholder for analyze all feature\n    analyzeAll() {\n      this.showSnackbar('Analyze All feature coming soon!', 'info');\n    },\n    // Trigger analysis for selected plant/date\n    onAnalyze() {\n      if (this.sidebarSelection.plantId && this.sidebarSelection.date) {\n        this.triggerAnalysis(this.sidebarSelection.plantId, this.sidebarSelection.date);\n        this.hasAnalyzed = true;\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* Layout and style for result viewer */\n.result-viewer-row {\n  min-height: 100vh;\n  width: 100vw;\n  margin: 0;\n}\n.sidebar-col {\n  background: #fafafa;\n  border-right: 1px solid #e0e0e0;\n  min-height: 100vh;\n  max-width: 320px;\n  padding: 0;\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n}\n.main-content-col {\n  position: relative;\n  max-width: calc(100vw - 320px);\n  min-height: 100vh;\n  background: #fff;\n  padding: 0;\n  box-sizing: border-box;\n}\n.result-viewer {\n  padding: 1rem;\n  font-family: sans-serif;\n}\n.tabs {\n  display: flex;\n  flex-wrap: wrap;\n  margin-bottom: 1rem;\n}\n.tabs button {\n  margin-right: 0.5rem;\n  padding: 0.5rem 1rem;\n  cursor: pointer;\n  background: #f0f0f0;\n  border: none;\n}\n.tabs button.active {\n  background: #1976d2;\n  color: white;\n}\n.loading {\n  font-style: italic;\n}\n.image-grid, .thumb-grid, .band-section .thumb-grid {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 1rem;\n  margin-bottom: 1rem;\n}\n.image-item {\n  text-align: center;\n}\n.image-item img, .thumb-grid img.thumb {\n  max-width: 200px;\n  border: 1px solid #ccc;\n}\n.data-table {\n  width: 100%;\n  border-collapse: collapse;\n  margin-bottom: 1.5rem;\n}\n.data-table th, .data-table td {\n  border: 1px solid #ddd;\n  padding: 0.5rem;\n  text-align: left;\n}\n.status {\n  font-size: 1.1rem;\n  color: green;\n  margin-top: 1rem;\n}\n.clickable-img {\n  max-width: 200px;\n  border: 1px solid #ccc;\n  cursor: zoom-in;\n  transition: box-shadow 0.2s;\n}\n.clickable-img:hover {\n  box-shadow: 0 4px 16px rgba(67,160,71,0.18);\n}\n.fab-btn {\n  position: fixed;\n  bottom: 32px;\n  right: 32px;\n  z-index: 10;\n}\n.desktop-img {\n  max-width: 500px;\n  max-height: 500px;\n  width: 100%;\n  height: auto;\n  margin: 0 auto 16px auto;\n  display: block;\n}\n@media (max-width: 1264px) {\n  .desktop-img {\n    max-width: 350px;\n    max-height: 350px;\n  }\n}\n@media (max-width: 960px) {\n  .desktop-img {\n    max-width: 220px;\n    max-height: 220px;\n  }\n}\n.result-footer {\n  width: 100vw;\n  background: #f5f5f5;\n  border-top: 1.5px solid #e0e0e0;\n  padding: 32px 0 16px 0;\n  text-align: center;\n  font-family: 'Inter', 'Roboto', 'Helvetica Neue', Arial, sans-serif;\n  font-size: 1.08rem;\n  color: #333;\n  margin-top: 48px;\n}\n.footer-content {\n  max-width: 900px;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 16px;\n}\n.footer-about {\n  margin-bottom: 8px;\n}\n.footer-actions {\n  margin-top: 8px;\n}\n.center-instruction {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 70vh;\n  font-size: 1.6rem;\n  color: #888;\n  font-weight: 600;\n  text-align: center;\n}\n.v-data-table {\n  font-size: 1.25rem !important;\n}\n.v-data-table-header th,\n.v-data-table td {\n  font-size: 1.25rem !important;\n}\n</style>\n"],"mappings":"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","ignoreList":[]}]}