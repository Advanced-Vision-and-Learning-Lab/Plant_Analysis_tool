Database Design
===============

The database layer is managed by SQLAlchemy, a Python SQL toolkit and Object-Relational Mapping (ORM) library. Alembic is used for database migrations.

Database Schema
---------------
The main tables are:
- **Plant**: Information about plant images and analysis
- **RawImage**: Metadata for uploaded images
- **ProcessedImage**: Processed images generated by the analysis
- **Analysis**: Results of the analysis performed on plant images
- **SegmentationModel**: Details of segmentation models used

The folder `backend/db/` contains the SQLAlchemy models for each table. The models define the structure and relationships, and are used for all CRUD operations.

Hashing to Avoid Data Duplication
---------------------------------
Unique identifiers for images are generated using hashing, to avoid duplication and improve performance.

Database Relationships
----------------------
- Plant and RawImage: One-to-Many
- Plant and ProcessedImage: One-to-Many
- Plant and Analysis: One-to-Many
- Analysis and SegmentationModel: Many-to-One
- RawImage and ProcessedImage: One-to-Many
- Analysis and ProcessedImage: One-to-One

For the complete schema, see the SQLAlchemy models in `backend/db/`.

Schema Changes
--------------
1. Edit the models in `backend/db/models.py`.
2. Generate a migration script:
   ```bash
   alembic revision --autogenerate -m "Describe your change"
   ```
3. Review and apply the migration:
   ```bash
   alembic upgrade head
   ```

Debugging Tips
--------------
- Use pgAdmin or psql to inspect tables and data.
- Example:
  ```bash
  docker exec -it <postgres-container> psql -U <user> -d <db>
  \dt
  SELECT * FROM <table>;
  ```