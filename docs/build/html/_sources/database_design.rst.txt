Database Design
===============

The database layer is managed by SQLAlchemy, a Python SQL toolkit and Object-Relational Mapping (ORM) library. SQLAlchemy provides a high-level API for interacting with databases, allowing developers to work with Python objects instead of SQL queries directly.

To trace the changes happens to the database schema over the time, Alembic is used for database migrations. Alembic is a lightweight database migration tool for SQLAlchemy, which generates migration scripts to apply changes to the database schema.

Database Schema
----------------

The database schema consists of the following tables:

* Plant: Contains information about the plant images and performed analysis
* RawImage: Manage the meta data of the raw images uploaded by the user
* ProcessedImage: Store the processed images generated by the analysis
* Analysis: Contains the results of the analysis performed on the plant images
* SegmentationModel: Store the segmentation model details used for the analysis

The folder ``src/db contains`` the SQLAlchemy models for each table. The models define the structure of the tables and the relationships between them. The models are used to interact with the database and perform CRUD operations. 

Also, it has the Alembic configuration and migration scripts to manage the database schema changes. The migration scripts are generated using the `alembic revision` command and applied using the `alembic upgrade` command.

Hashing To Avoid Data Duplication
---------------------------------

To avoid duplication of data in the database, hashing is used to generate unique identifiers for the images. The hash is generated based on the image content, and it is used to check if the image already exists in the database before storing it. This helps in reducing the storage space and improving the performance of the application.

Database Relationships
----------------------

The database tables have wide variety of relationships for example:

* Plant and RawImage: One-to-Many relationship. A plant can have multiple raw images
* Plant and ProcessedImage: One-to-Many relationship. A plant can have multiple processed images
* Plant and Analysis: One-to-Many relationship. A plant can have multiple analysis results
* Analysis and SegmentationModel: Many-to-One relationship. An analysis result is associated with one segmentation model
* RawImage and ProcessedImage: One-to-many relationship. A raw image can be processed with different options
* Analysis and ProcessedImage: One-to-One relationship. An analysis result is associated with one processed image

For the complete database schema and relationships, refer to the SQLAlchemy models in the ``src/db`` folder.

Steps to make any changes to the database schema
--------------------------------------------------

1. Make the necessary changes to the SQLAlchemy models in the ``src/db`` folder.
2. Generate a migration script using the ``alembic revision`` command:

   .. code-block:: bash

       alembic revision --autogenerate -m "Add new column to Plant table"

3. Review the generated migration script in the alembic/versions folder. Sometimes, manual changes may be required.
4. Apply the migration script using the ``alembic upgrade`` command:

   .. code-block:: bash

       alembic upgrade head

Helpful debugging tips:
-----------------------
You can always log into the database container using:

.. code-block:: bash

    docker exec -it common-postgres_app_dev-1 psql -U <user-name> -d <password>

Then, you can run the following commands to check the tables and data:

.. code-block:: psql

    \dt  -- List all tables in the database
    SELECT * FROM <table-name>;  -- Display all rows in a table

You can perform any SQL queries to check the data and relationships between tables.