services:
  backend-api:
    build:
      context: ../../
      dockerfile: docker/backend-api/Dockerfile.api
    env_file:
      - ../common/.env
    environment:
      DB_CONNECTION_STRING: ${DB_DEV_CONNECTION_STRING}
      ENVIRONMENT: development
      PYTHONPATH: /app:/app/backend:/app/services:/app/src
      MODELS_DIRECTORY: /app/backend/models
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      HF_TOKEN: ${HF_TOKEN}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
    ports:
      - "8001:8000"
    volumes:
      - ../../backend:/app/backend
      - "../../src:/app/src"
      - ../backend-api/entrypoint.sh:/app/entrypoint.sh
    entrypoint: ./entrypoint.sh
    depends_on:
      mysql_app_dev:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001"]
      interval: 30s
      timeout: 10s
      retries: 10
    restart: unless-stopped

  mysql_app_dev:
    image: mysql:8
    environment:
      MYSQL_USER: ${MYSQL_DEV_USER}
      MYSQL_PASSWORD: ${MYSQL_DEV_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DEV_DB}
      MYSQL_ROOT_PASSWORD: rootpassword
      HF_TOKEN: ${HF_TOKEN}
    ports:
      - "3306:3306"
    volumes:
      - ../../../docker_artifacts/mysql_data/dev:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  frontend:
    build:
      context: ../../
      dockerfile: docker/frontend/Dockerfile.frontend
    ports:
      - "8080:80"
    depends_on:
      - backend-api
    restart: unless-stopped

  sync-db:
    build:
      context: ../..
      dockerfile: docker/backend-api/Dockerfile.api
    command: ["/bin/bash", "-c", "while true; do python /app/scripts/sync_s3_to_db.py; sleep 600; done"]
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME}
      DB_DEV_CONNECTION_STRING: ${DB_DEV_CONNECTION_STRING}
      HF_TOKEN: ${HF_TOKEN}
    depends_on:
      - backend-api
    restart: unless-stopped

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    restart: unless-stopped

  celery-worker:
    build:
      context: ../..
      dockerfile: docker/backend-api/Dockerfile.api
    command: celery -A backend.tasks worker --loglevel=info
    depends_on:
      - redis
      - backend-api
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    env_file:
      - ../common/.env
    deploy:
      replicas: 4
    restart: unless-stopped

# Removed postgres and pgadmin services. MySQL is now used for the database.
# Remove the volumes section since we're using bind mounts
# volumes:
#   mysql_data_dev:
