version: '3.8'

services:
  backend-api:
    build:
      context: ../../
      dockerfile: docker/backend-api/Dockerfile.api
    env_file:
      - ../common/.env
    environment:
      DB_CONNECTION_STRING: ${DB_DEV_CONNECTION_STRING}
      ENVIRONMENT: development
      PYTHONPATH: /app:/app/backend:/app/services
      MODELS_DIRECTORY: /app/backend/models
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      HF_TOKEN: ${HF_TOKEN}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
    ports:
      - "8001:8000"
    volumes:
      - ../../backend:/app/backend        
      - ../../src:/app/src                 
      - ../backend-api/entrypoint.sh:/app/entrypoint.sh
    entrypoint: ./entrypoint.sh
    depends_on:
      postgres_app_dev:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 10

  postgres_app_dev:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_DEV_USER}
      HF_TOKEN: ${HF_TOKEN}
      POSTGRES_PASSWORD: ${POSTGRES_DEV_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DEV_DB}
    ports:
      - "5434:5432"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_DEV_USER} -d ${POSTGRES_DEV_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
      
  frontend:
    build:
      context: ../../
      dockerfile: docker/frontend/Dockerfile.frontend
    ports:
      - "8080:80"
    depends_on:
      - backend-api

  sync-db:
    build:
      context: ../..
      dockerfile: docker/backend-api/Dockerfile.api
    command: ["/bin/bash", "-c", "while true; do python /app/scripts/sync_s3_to_db.py; sleep 600; done"]
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME}
      DB_DEV_CONNECTION_STRING: ${DB_DEV_CONNECTION_STRING}
    depends_on:
      - backend-api

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"

  celery-worker:
    build:
      context: ../..
      dockerfile: docker/backend-api/Dockerfile.api
    command: celery -A backend.tasks worker --loglevel=info
    depends_on:
      - redis
      - backend-api
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    deploy:
      replicas: 4
    env_file:
      - ../common/.env

  pgadmin2:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_LOG_FILE: /tmp/pgadmin4.log
    ports:
      - "5050:80"
    depends_on:
      - postgres_app_dev
    volumes:
      - ./pgadmin-logs:/var/log/pgadmin

volumes:
  postgres_data_dev:
